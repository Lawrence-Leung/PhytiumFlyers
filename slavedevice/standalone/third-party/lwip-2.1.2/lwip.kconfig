menu "LWIP Configuration"
    source "$(STANDALONE_DIR)/third-party/lwip-2.1.2/ports/Kconfig"
    

    config LWIP_NO_SYS
        bool "Lwip No SYS"
        default y

    config LWIP_LOCAL_HOSTNAME
        string "Local netif hostname"
        default 'phytium'
        help
            The default name this device will report to other devices on the network.
# application
    menu "LWIP_APP"
        config USE_LWIP_APP_LWIPERF
            bool "Enable lwiperf func"
            default n
        config USE_LWIP_APP_PING
            bool "Enable ping func"
            default n
        config USE_LWIP_APP_TFTP
            bool "Enable tftp func"
            default n
    endmenu
# Lwip Memory config
    menu "Memory configuration"
        choice LWIP_USE_MEMORY_TYPE
            prompt "Select memory type"
            default LWIP_USE_MEM_POOL
            help
                If LWIP_USE_MEM_POOL is selected, MEMP_MEM_MALLOC will be activated.
                If LWIP_USE_MEM_HEAP is selected ,lwip memory heap will be activated

            config LWIP_USE_MEM_POOL
                bool "use mem pool"
            config LWIP_USE_MEM_HEAP
                bool "the size of the heap memory"
            config LWIP_USE_MEM_HEAP_DEBUG
                bool "lwip port debug mode enabled"
 
        endchoice
        
        if LWIP_USE_MEM_HEAP 
            config MEM_SIZE
                int "Memory pool Size (MB)"
                range 1 16
                default 1
        endif

        if LWIP_USE_MEM_POOL
            config MEMP_NUM_PBUF
                int "the number of memp struct pbufs"
                range 16 1024
                default 64
        endif
        
        if LWIP_USE_MEM_HEAP_DEBUG
            menu "mem debug mode"
            config MEM_DEBUG_SIZE
                int "Memory pool Sizeâ€”Debug mode(KB)"
                range 100 1000
                default 300
            config MEM_SANITY_CHECK_EN
                bool "MEM_SANITY_CHECK enabled"
                default n
            config MEM_OVERFLOW_CHECK
                int "MEM_OVERFLOW_CHECK value"
                default 0
            endmenu
        endif       


        config MEM_ALIGNMENT
            int "alignment of the CPU"
            range 2 1024
            default 64

                    
        

    endmenu
#  Pbuf options
    menu "Pbuf options"
        config PBUF_POOL_BUFSIZE
            int "the size of each pbuf in the pbuf pool (KB)"
            range 2 64
            default 2
            help
                the size of each pbuf in the pbuf pool. The default is
                designed to accommodate single full size TCP frame in one pbuf, including
                TCP_MSS, IP header, and link header.

        config PBUF_POOL_SIZE
            int "the number of buffers in the pbuf pool (KB)"
            default 1
            help
                the number of buffers in the pbuf pool.
    endmenu
# ARP options
    menu "ARP"
    config ARP_QUEUEING_EN
        bool "ARP QUEUEING en"
        default y
    endmenu
# IP options
    menu "IPV4"
    config USE_IPV4_ONLY
        bool "Only use IPv4 packets"
        default n
        help 
            If this switch is enabled, ipv6 cannot be used simultaneously

    config LWIP_IP4_REASSEMBLY
        bool "Enable reassembly incoming fragmented IP4 packets"
        default n
        help
            Enabling this option allows reassemblying incoming fragmented IP4 packets.
    
    config LWIP_IP4_FRAG
        bool "Enable fragment outgoing IP4 packets"
        default y
        help
            Enabling this option allows fragmenting outgoing IP4 packets if their size
            exceeds MTU.

    config LWIP_IP_FORWARD
        bool "Enable IP forwarding"
        default n
        help
            Enabling this option allows packets forwarding across multiple interfaces.

    config LWIP_IPV4_NAPT
        bool "Enable NAT (new/experimental)"
        depends on LWIP_IP_FORWARD
        select LWIP_L2_TO_L3_COPY
        default n
        help
            Enabling this option allows Network Address and Port Translation.
    
    config IP_REASS_MAX_PBUFS
        int "Total maximum amount of pbufs waiting to be reassembled"
        default 16
        range 1 45
        help
            Total maximum amount of pbufs waiting to be reassembled.
            Since the received pbufs are enqueued, be sure to configure
            PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
            packets even if the maximum amount of fragments is enqueued for reassembly!

    endmenu # IP

# ICMP options
    menu "ICMP"

        config LWIP_ICMP
            bool "ICMP: Enable ICMP"
            default y
            help
                Enable ICMP module for check network stability

        config LWIP_MULTICAST_PING
            bool "Respond to multicast pings"
            default n
            depends on LWIP_ICMP6 || LWIP_ICMP

        config LWIP_BROADCAST_PING
            bool "Respond to broadcast pings"
            default n
            depends on LWIP_ICMP

    endmenu # ICMP

# Lwip RAW API options
    menu "LWIP RAW API"
        config LWIP_RAW_API_EN
                bool "RAW API EN"
                default y
                
        config LWIP_MAX_RAW_PCBS
                int "Maximum LWIP RAW PCBs"
                range 1 1024
                default 16
                depends on LWIP_RAW_API_EN
                help
                    The maximum number of simultaneously active LWIP
                    RAW protocol control blocks. The practical maximum
                    limit is determined by available heap memory at runtime.

    endmenu

# DHCP options
    menu "DHCP"
    config LWIP_DHCP_ENABLE
        bool "Enable the DHCP function of lwip"
        default n
        

    if LWIP_DHCP_ENABLE
        config LWIP_DHCP_DOES_ARP_CHECK
            bool "DHCP: Perform ARP check on any offered address"
            default n
            help
                Enabling this option performs a check (via ARP request) if the offered IP address
                is not already in use by another host on the network.

        config LWIP_DHCP_GET_NTP_SRV
            bool "Request NTP servers from DHCP"
            default n
            help
                If enabled, LWIP will add 'NTP' to Parameter-Request Option sent via DHCP-request.
                DHCP server might reply with an NTP server address in option 42.
                SNTP callback for such replies should be set accordingly (see sntp_servermode_dhcp() func.)

        config LWIP_DHCP_DISABLE_CLIENT_ID
            bool "DHCP: Disable Use of HW address as client identification"
            default n
            help
                This option could be used to disable DHCP client identification with its MAC address.
                (Client id is used by DHCP servers to uniquely identify clients and are included
                in the DHCP packets as an option 61)
                Set this option to "y" in order to exclude option 61 from DHCP packets.

        config LWIP_DHCP_RESTORE_LAST_IP
            bool "DHCP: Restore last IP obtained from DHCP server"
            default n
            help
                When this option is enabled, DHCP client tries to re-obtain last valid IP address obtained from DHCP
                server. Last valid DHCP configuration is stored in nvs and restored after reset/power-up. If IP is still
                available, there is no need for sending discovery message to DHCP server and save some time.

        config LWIP_DHCP_MAX_NTP_SERVERS
                int "Maximum number of NTP servers aquired via DHCP"
                default 1
                range 1 16
                depends on LWIP_DHCP_GET_NTP_SRV
                help
                    Set maximum number of NTP servers aquired via DHCP-offer.
                    Should be less or equal to "Maximum number of NTP servers", any extra servers would be just ignored.

        config LWIP_DHCP_OPTIONS_LEN
            int "DHCP total option length"
            default 68 if LWIP_DHCP_DISABLE_VENDOR_CLASS_ID
            default 108 if !LWIP_DHCP_DISABLE_VENDOR_CLASS_ID
            range 68 255
            help
                Set total length of outgoing DHCP option msg. Generally bigger value means it can carry more
                options and values. If your code meets LWIP_ASSERT due to option value is too long.
                Please increase the LWIP_DHCP_OPTIONS_LEN value.


        config LWIP_DHCP_DISABLE_VENDOR_CLASS_ID
            bool "DHCP: Disable Use of vendor class identification"
            default y
            help
                This option could be used to disable DHCP client vendor class identification.
                Set this option to "y" in order to exclude option 60 from DHCP packets.

    endif
    
    endmenu # DHCP

# AUTOIP options

    menu "AUTOIP"
    menuconfig LWIP_AUTOIP
        bool "Enable IPV4 Link-Local Addressing (AUTOIP)"
        default n
        help
            Enabling this option allows the device to self-assign an address
            in the 169.256/16 range if none is assigned statically or via DHCP.

            See RFC 3927.
    
    config LWIP_AUTOIP_TRIES
        int "DHCP Probes before self-assigning IPv4 LL address"
        range 1 100
        default 2
        depends on LWIP_AUTOIP
        help
            DHCP client will send this many probes before self-assigning a
            link local address.

            From LWIP help: "This can be set as low as 1 to get an AutoIP
            address very quickly, but you should be prepared to handle a
            changing IP address when DHCP overrides AutoIP." (In the case of
            ESP-IDF, this means multiple SYSTEM_EVENT_STA_GOT_IP events.)

    config LWIP_AUTOIP_MAX_CONFLICTS
        int "Max IP conflicts before rate limiting"
        range 1 100
        default 9
        depends on LWIP_AUTOIP
        help
            If the AUTOIP functionality detects this many IP conflicts while
            self-assigning an address, it will go into a rate limited mode.

    config LWIP_AUTOIP_RATE_LIMIT_INTERVAL
        int "Rate limited interval (seconds)"
        range 5 120
        default 20
        depends on LWIP_AUTOIP
        help
            If rate limiting self-assignment requests, wait this long between
            each request.
    endmenu # AUTOIP
#  IGMP options
    menu "IGMP"
    config LWIP_IGMP_EN
        bool "LWIP IGMP Enable"
        default y
    endmenu
#  DNS options
    menu "DNS"
    config LWIP_DNS_SUPPORT_MDNS_QUERIES
        bool "Enable mDNS queries in resolving host name"
        default y
        help
            If this feature is enabled, standard API such as gethostbyname
            support .local addresses by sending one shot multicast mDNS
            query
    endmenu # DNS
# UDP options    
    menu "UDP"
    config LWIP_MAX_UDP_PCBS
        int "Maximum active UDP control blocks"
        range 1 1024
        default 16
        help
            The maximum number of active UDP "connections" (ie
            UDP sockets sending/receiving data).
            The practical maximum limit is determined by available
            heap memory at runtime.

    config LWIP_UDP_RECVMBOX_SIZE
        int "Default UDP receive mail box size"
        default 6
        range 6 64
        help
            Set UDP receive mail box size. The recommended value is 6.

            UDP receive mail box is a per socket mail box, when the application receives packets
            from UDP socket, LWIP core firstly posts the packets to UDP receive mail box and the
            application then fetches the packets from mail box. It means LWIP can caches maximum
            UDP_RECCVMBOX_SIZE packets for each UDP socket, so the maximum possible cached UDP packets
            for all UDP sockets is UDP_RECCVMBOX_SIZE multiples the maximum UDP socket number. In other
            words, the bigger UDP_RECVMBOX_SIZE means more memory.
            On the other hand, if the receiv mail box is too small, the mail box may be full. If the
            mail box is full, the LWIP drops the packets. So generally we need to make sure the UDP
            receive mail box is big enough to avoid packet drop between LWIP core and application.

    # UDP options
        config LWIP_NETBUF_RECVINFO
            bool "Enable IP_PKTINFO option"
            default n
            help
                Enabling this option allows checking for the destination address
                of a received IPv4 Packet.


        endmenu # UDP

# TCP options
    menu "TCP"
    config LWIP_TCP_WND_DEFAULT
        int "Default receive window size"
        default 5744 # 4 * default MSS
        range 2440 65535 if !LWIP_WND_SCALE
        range 2440 1073725440 if LWIP_WND_SCALE
        help
            Set default TCP receive window size for new TCP sockets.

            Per-socket receive window size can be changed at runtime
            with lwip_setsockopt(s, TCP_WINDOW, ...).

            Setting a smaller default receive window size can save some RAM,
            but will significantly decrease performance.

    config LWIP_TCP_MAXRTX
        int "Maximum number of retransmissions of data segments"
        default 12
        range 3 12
        help
            Set maximum number of retransmissions of data segments.

    config LWIP_TCP_SYNMAXRTX
        int "Maximum number of retransmissions of SYN segments"
        default 6 if !LWIP_TCP_HIGH_SPEED_RETRANSMISSION
        default 12 if LWIP_TCP_HIGH_SPEED_RETRANSMISSION
        range 3 12
        help
            Set maximum number of retransmissions of SYN segments.

    config LWIP_TCP_QUEUE_OOSEQ
        bool "Queue incoming out-of-order segments"
        default y
        help
            Queue incoming out-of-order segments for later use.

            Disable this option to save some RAM during TCP sessions, at the expense
            of increased retransmissions if segments arrive out of order.


    config LWIP_TCP_SACK_OUT
        bool "Support sending selective acknowledgements"
        default n
        depends on LWIP_TCP_QUEUE_OOSEQ
        help
            TCP will support sending selective acknowledgements (SACKs).

    config LWIP_TCP_MSS
        int "Maximum Segment Size (MSS)"
        default 1440
        range 536 1460
        help
            Set maximum segment size for TCP transmission.

            Can be set lower to save RAM, the default value 1460(ipv4)/1440(ipv6) will give best throughput.
            IPv4 TCP_MSS Range: 576 <= TCP_MSS <= 1460
            IPv6 TCP_MSS Range: 1220<= TCP_mSS <= 1440

    config LWIP_TCP_SND_BUF_DEFAULT
        int "Default send buffer size"
        default 5744  # 4 * default MSS
        range 2440 65535 if !LWIP_WND_SCALE
        range 2440 1024000 if LWIP_WND_SCALE
        help
            Set default send buffer size for new TCP sockets.

            Per-socket send buffer size can be changed at runtime
            with lwip_setsockopt(s, TCP_SNDBUF, ...).

            This value must be at least 2x the MSS size, and the default
            is 4x the default MSS size.

            Setting a smaller default SNDBUF size can save some RAM, but
            will decrease performance.
    choice LWIP_TCP_OVERSIZE
        prompt "Pre-allocate transmit PBUF size"
        default LWIP_TCP_OVERSIZE_MSS
        help
            Allows enabling "oversize" allocation of TCP transmission pbufs ahead of time,
            which can reduce the length of pbuf chains used for transmission.

            This will not make a difference to sockets where Nagle's algorithm
            is disabled.

            Default value of MSS is fine for most applications, 25% MSS may save
            some RAM when only transmitting small amounts of data. Disabled will
            have worst performance and fragmentation characteristics, but uses
            least RAM overall.

        config LWIP_TCP_OVERSIZE_MSS
            bool "MSS"
        config LWIP_TCP_OVERSIZE_QUARTER_MSS
            bool "25% MSS"
        config LWIP_TCP_OVERSIZE_DISABLE
            bool "Disabled"

    endchoice

    config LWIP_TCP_TMR_INTERVAL
        int "TCP timer interval(ms)"
        default 250
        help
            Set TCP timer interval in milliseconds.

            Can be used to speed connections on bad networks.
            A lower value will redeliver unacked packets faster.

    config LWIP_TCP_MSL
        int "Maximum segment lifetime (MSL)"
        default 60000
        help
            Set maximum segment lifetime in in milliseconds.

    config LWIP_WND_SCALE
        bool "Support TCP window scale"
        default n
        help
            Enable this feature to support TCP window scaling.
    config LWIP_TCP_RCV_SCALE
        int  "Window size scaling factor"
        depends on LWIP_WND_SCALE
        range 0 14
        default 0
        help
            Set the desired scaling factor (shift count in the range of [0..14]).
            The value can raise the ceiling of TCP_WND.
    config LWIP_TCP_RTO_TIME
        int "Default TCP rto time"
        default 3000 if !LWIP_TCP_HIGH_SPEED_RETRANSMISSION
        default 1500 if LWIP_TCP_HIGH_SPEED_RETRANSMISSION
        help
            Set default TCP rto time for a reasonable initial rto.
            In bad network environment, recommend set value of rto time to 1500.

    config LWIP_MAX_ACTIVE_TCP
        int "Maximum active TCP Connections"
        range 1 1024
        default 16
        help
            The maximum number of simultaneously active TCP
            connections. The practical maximum limit is
            determined by available heap memory at runtime.

            Changing this value by itself does not substantially
            change the memory usage of LWIP, except for preventing
            new TCP connections after the limit is reached.

    config LWIP_MAX_LISTENING_TCP
        int "Maximum listening TCP Connections"
        range 1 1024
        default 16
        help
            The maximum number of simultaneously listening TCP
            connections. The practical maximum limit is
            determined by available heap memory at runtime.

            Changing this value by itself does not substantially
            change the memory usage of LWIP, except for preventing
            new listening TCP connections after the limit is reached.

    config LWIP_TCP_HIGH_SPEED_RETRANSMISSION
        bool "TCP high speed retransmissions"
        default y
        help
            Speed up the TCP retransmission interval. If disabled,
            it is recommended to change the number of SYN retransmissions to 6,
            and TCP initial rto time to 3000.


    config LWIP_TCP_RECVMBOX_SIZE
        int "Default TCP receive mail box size"
        default 6
        range 6 64 if !LWIP_WND_SCALE
        range 6 1024 if LWIP_WND_SCALE
        help
            Set TCP receive mail box size. Generally bigger value means higher throughput
            but more memory. The recommended value is: LWIP_TCP_WND_DEFAULT/TCP_MSS + 2, e.g. if
            LWIP_TCP_WND_DEFAULT=14360, TCP_MSS=1436, then the recommended receive mail box size is
            (14360/1436 + 2) = 12.

            TCP receive mail box is a per socket mail box, when the application receives packets
            from TCP socket, LWIP core firstly posts the packets to TCP receive mail box and the
            application then fetches the packets from mail box. It means LWIP can caches maximum
            LWIP_TCP_RECCVMBOX_SIZE packets for each TCP socket, so the maximum possible cached TCP packets
            for all TCP sockets is LWIP_TCP_RECCVMBOX_SIZE multiples the maximum TCP socket number. In other
            words, the bigger LWIP_TCP_RECVMBOX_SIZE means more memory.
            On the other hand, if the receiv mail box is too small, the mail box may be full. If the
            mail box is full, the LWIP drops the packets. So generally we need to make sure the TCP
            receive mail box is big enough to avoid packet drop between LWIP core and application.

    endmenu # TCP

# Network Interfaces options
    menu "Network_Interface"
    config LWIP_NETIF_API
        bool "Enable usage of standard POSIX APIs in LWIP"
        default n
        help
            If this feature is enabled, standard POSIX APIs: if_indextoname(), if_nametoindex()
            could be used to convert network interface index to name

    config LWIP_NETIF_STATUS_CALLBACK
        bool "Enable status callback for network interfaces"
        default n
        help
            Enable callbacks when the network interface is up/down and addresses are changed.

    endmenu
# LOOPIF options
    menu "LOOPIF"
    menuconfig LWIP_NETIF_LOOPBACK
        bool "Support per-interface loopback"
        default y
        help
            Enabling this option means that if a packet is sent with a destination
            address equal to the interface's own IP address, it will "loop back" and
            be received by this interface.
            Disabling this option disables support of loopback interface in lwIP

    config LWIP_LOOPBACK_MAX_PBUFS
        int "Max queued loopback packets per interface"
        range 0 16
        default 8
        depends on LWIP_NETIF_LOOPBACK
        help
            Configure the maximum number of packets which can be queued for
            loopback on a given interface. Reducing this number may cause packets
            to be dropped, but will avoid filling memory with queued packet data.
    endmenu
# SLIPIF options

    menu "SLIPIF"
    config LWIP_SLIP_SUPPORT
        bool "Enable SLIP support (new/experimental)"
        default n
        help
            Enable SLIP stack. Now only SLIP over serial is possible.

            SLIP over serial support is experimental and unsupported.

    config LWIP_SLIP_DEBUG_ON
        bool "Enable SLIP debug log output"
        depends on LWIP_SLIP_SUPPORT
        default n
        help
            Enable SLIP debug log output
    endmenu   
# Platform specific locking

    config LWIP_TCPIP_CORE_LOCKING
        bool "Enable tcpip core locking"
        default n
        help
            If Enable tcpipã€€core locking,Creates a global mutex that is held
            during TCPIP thread operations.Can be locked by client code to perform
            lwIP operations without changing into TCPIP thread using callbacks.
            See LOCK_TCPIP_CORE() and UNLOCK_TCPIP_CORE().

            If disable tcpipã€€core locking,TCP IP will perform tasks through context switchingï¼Ž


# socket options
    menu "Socket" 
    depends on !LWIP_NO_SYS
    config LWIP_MAX_SOCKETS
            int "Max number of open sockets"
            range 1 16
            default 10
            depends on !LWIP_NO_SYS
            help
                Sockets take up a certain amount of memory, and allowing fewer
                sockets to be open at the same time conserves memory. Specify
                the maximum amount of sockets here. The valid value is from 1
                to 16.
    config LWIP_SO_LINGER
        bool "Enable SO_LINGER processing"
        default n
        help
            Enabling this option allows SO_LINGER processing.
            l_onoff = 1,l_linger can set the timeout.

            If l_linger=0, When a connection is closed, TCP will terminate the connection.
            This means that TCP will discard any data packets stored in the socket send buffer
            and send an RST to the peer.

            If l_linger!=0,Then closesocket() calls to block the process until
            the remaining data packets has been sent or timed out.
    
    config LWIP_SO_REUSE
        bool "Enable SO_REUSEADDR option"
        default y
        help
            Enabling this option allows binding to a port which remains in
            TIME_WAIT.
    
    config LWIP_SO_REUSE_RXTOALL
        bool "SO_REUSEADDR copies broadcast/multicast to all matches"
        depends on LWIP_SO_REUSE
        default y
        help
            Enabling this option means that any incoming broadcast or multicast
            packet will be copied to all of the local sockets that it matches
            (may be more than one if SO_REUSEADDR is set on the socket.)

            This increases memory overhead as the packets need to be copied,
            however they are only copied per matching socket. You can safely
            disable it if you don't plan to receive broadcast or multicast
            traffic on more than one socket at a time.
    endmenu 

# Statistics options
    config LWIP_STATS
        bool "Enable LWIP statistics"
        default n
        help
            Enabling this option allows LWIP statistics


# PPP options
    menu "PPP"
    menuconfig LWIP_PPP_SUPPORT
        bool "Enable PPP support (new/experimental)"
        default n
        help
            Enable PPP stack. Now only PPP over serial is possible.

            PPP over serial support is experimental and unsupported.

    config LWIP_PPP_ENABLE_IPV6
        bool "Enable IPV6 support for PPP connections (IPV6CP)"
        depends on LWIP_PPP_SUPPORT && LWIP_IPV6
        default y
        help
            Enable IPV6 support in PPP for the local link between the DTE (processor) and DCE (modem).
            There are some modems which do not support the IPV6 addressing in the local link.
            If they are requested for IPV6CP negotiation, they may time out.
            This would in turn fail the configuration for the whole link.
            If your modem is not responding correctly to PPP Phase Network, try to disable IPV6 support.

    config LWIP_IPV6_MEMP_NUM_ND6_QUEUE
        int "Max number of IPv6 packets to queue during MAC resolution"
        depends on LWIP_IPV6
        range 3 20
        default 3
        help
            Config max number of IPv6 packets to queue during MAC resolution.

    config LWIP_IPV6_ND6_NUM_NEIGHBORS
        int "Max number of entries in IPv6 neighbor cache"
        depends on LWIP_IPV6
        range 3 10
        default 5
        help
            Config max number of entries in IPv6 neighbor cache

    config LWIP_PPP_NOTIFY_PHASE_SUPPORT
        bool "Enable Notify Phase Callback"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable to set a callback which is called on change of the internal PPP state machine.

    config LWIP_PPP_PAP_SUPPORT
        bool "Enable PAP support"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable Password Authentication Protocol (PAP) support

    config LWIP_PPP_CHAP_SUPPORT
        bool "Enable CHAP support"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable Challenge Handshake Authentication Protocol (CHAP) support

    config LWIP_PPP_MSCHAP_SUPPORT
        bool "Enable MSCHAP support"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable Microsoft version of the Challenge-Handshake Authentication Protocol (MSCHAP) support

    config LWIP_PPP_MPPE_SUPPORT
        bool "Enable MPPE support"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable Microsoft Point-to-Point Encryption (MPPE) support

    config LWIP_ENABLE_LCP_ECHO
        bool "Enable LCP ECHO"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable LCP echo keepalive requests

    config LWIP_LCP_ECHOINTERVAL
        int "Echo interval (s)"
        range 0 1000000
        depends on LWIP_ENABLE_LCP_ECHO
        default 3
        help
            Interval in seconds between keepalive LCP echo requests, 0 to disable.

    config LWIP_LCP_MAXECHOFAILS
        int "Maximum echo failures"
        range 0 100000
        depends on LWIP_ENABLE_LCP_ECHO
        default 3
        help
            Number of consecutive unanswered echo requests before failure is indicated.

    config LWIP_PPP_DEBUG_ON
        bool "Enable PPP debug log output"
        depends on LWIP_PPP_SUPPORT
        default n
        help
            Enable PPP debug log output
    endmenu # PPP

# Checksums

    menu "Checksums"

        config LWIP_CHECKSUM_CHECK_IP
            bool "Enable LWIP IP checksums"
            default n
            help
                Enable checksum checking for received IP messages

        config LWIP_CHECKSUM_CHECK_UDP
            bool "Enable LWIP UDP checksums"
            default n
            help
                Enable checksum checking for received UDP messages

        config LWIP_CHECKSUM_CHECK_ICMP
            bool "Enable LWIP ICMP checksums"
            default y
            help
                Enable checksum checking for received ICMP messages

    endmenu # Checksums

# ipv6
    menu "IPV6"
        config LWIP_IPV6
            bool "Enable IPv6"
            default y
            help
                Enable IPv6 function. If not use IPv6 function, set this option to n.
                If disabling LWIP_IPV6 then some other components (coap and asio) will
                no longer be available.

        config LWIP_IPV6_AUTOCONFIG
            bool "Enable IPV6 stateless address autoconfiguration (SLAAC)"
            depends on LWIP_IPV6
            default n
            help
                Enabling this option allows the devices to IPV6 stateless address autoconfiguration (SLAAC).

                See RFC 4862.

        config LWIP_IPV6_NUM_ADDRESSES
            int "Number of IPv6 addresses on each network interface"
            depends on LWIP_IPV6
            default 3
            help
                The maximum number of IPv6 addresses on each interface. Any additional
                addresses will be discarded.

        config LWIP_IPV6_FORWARD
            bool "Enable IPv6 forwarding between interfaces"
            depends on LWIP_IPV6
            default n
            help
                Forwarding IPv6 packets between interfaces is only required when acting as
                a router.

        config LWIP_IPV6_RDNSS_MAX_DNS_SERVERS
            int "Use IPv6 Router Advertisement Recursive DNS Server Option"
            depends on LWIP_IPV6_AUTOCONFIG
            default 0
            help
                Use IPv6 Router Advertisement Recursive DNS Server Option (as per RFC 6106) to
                copy a defined maximum number of DNS servers to the DNS module.
                Set this option to a number of desired DNS servers advertised in the RA protocol.
                This feature is disabled when set to 0.

        config LWIP_IPV6_DHCP6
            bool "Enable DHCPv6 stateless address autoconfiguration"
            depends on LWIP_IPV6_AUTOCONFIG
            default n
            help
                Enable DHCPv6 for IPv6 stateless address autoconfiguration.
                Note that the dhcpv6 client has to be started using dhcp6_enable_stateless(netif);
                Note that the stateful address autoconfiguration is not supported.

        config LWIP_IP6_FRAG
            bool "Enable fragment outgoing IP6 packets"
            default y
            depends on LWIP_IPV6
            help
                Enabling this option allows fragmenting outgoing IP6 packets if their size
                exceeds MTU.

        config LWIP_IP6_REASSEMBLY
            bool "Enable reassembly incoming fragmented IP6 packets"
            default n
            depends on LWIP_IPV6
            help
                Enabling this option allows reassemblying incoming fragmented IP6 packets.
    endmenu
    
    

#debug options

    menuconfig LWIP_DEBUG
        bool "Enable LWIP Debug"
        default n
        help
            Enabling this option allows different kinds of lwIP debug output.

            All lwIP debug features increase the size of the final binary.

    config LWIP_DEBUG_ESP_LOG
        bool "Route LWIP debugs through ESP_LOG interface"
        depends on LWIP_DEBUG
        default n
        help
            Enabling this option routes all enabled LWIP debugs through ESP_LOGD.

    config LWIP_NETIF_DEBUG
        bool "Enable netif debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_PBUF_DEBUG
        bool "Enable pbuf debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_ETHARP_DEBUG
        bool "Enable etharp debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_API_LIB_DEBUG
        bool "Enable api lib debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_SOCKETS_DEBUG
        bool "Enable socket debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_IP_DEBUG
        bool "Enable IP debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_ICMP_DEBUG
        bool "Enable ICMP debug messages"
        depends on LWIP_DEBUG && LWIP_ICMP
        default n

    config LWIP_DHCP_STATE_DEBUG
        bool "Enable DHCP state tracking"
        depends on LWIP_DEBUG
        default n

    config LWIP_DHCP_DEBUG
        bool "Enable DHCP debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_IP6_DEBUG
        bool "Enable IP6 debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_ICMP6_DEBUG
        bool "Enable ICMP6 debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_TCP_DEBUG
        bool "Enable TCP debug messages"
        depends on LWIP_DEBUG
        default n
    config LWIP_UDP_DEBUG
        bool "Enable UDP debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_SNTP_DEBUG
        bool "Enable SNTP debug messages"
        depends on LWIP_DEBUG
        default n

    config LWIP_DNS_DEBUG
        bool "Enable DNS debug messages"
        depends on LWIP_DEBUG
        default n

    endmenu

