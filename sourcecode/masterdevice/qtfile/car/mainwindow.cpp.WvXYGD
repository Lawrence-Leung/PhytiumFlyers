#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "camera.h"
#include "form.h"
#include "QLabel"
#include <QtMultimedia/QtMultimedia>
#include <QtMultimediaWidgets/QVideoWidget>
#include <QPushButton>
#include <QDebug>
#include <QMessageBox>

#include <QApplication>
#include <QFileDialog>
#include <QPixmap>
#include <QKeyEvent>
#include <QCameraInfo>
#include <QGridLayout>
#include <QIcon>
#include <QStandardItem>
#include <QSize>


MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow), capturer(nullptr)
{
    ui->setupUi(this);


#if 0
    Form* form=new Form(this);//指定父窗口为this
    form->show();

    InfoDialog* w=new InfoDialog;
    w->show();
    InfoDialog* w=new InfoDialog(this);//必须指定了父对象才能自动回收内存
    w->show();
#else

    initUI();
    data_lock = new QMutex();

#endif



}

void MainWindow::initUI()
{


    connect(ui->actionExit,SIGNAL(triggered(bool)), QApplication::instance(), SLOT(quit()));
    connect(ui->actionRead_Camera,SIGNAL(triggered(bool)), this, SLOT(showCameraInfo()));
    connect(ui->actionOpen_Camera, SIGNAL(triggered(bool)), this, SLOT(openCamera()));
    connect(ui->actionCalculate_FPS,SIGNAL(triggered(bool)),this,SLOT(calculateFPS()));


    //setup status bar
    mainStatusBar = statusBar();
    mainStatusLabel = new QLabel(mainStatusBar);
    mainStatusBar->addPermanentWidget(mainStatusLabel);
    mainStatusLabel->setText("Monitor is Ready");
    qDebug()<<"Over";
}

void MainWindow::showCameraInfo()
{
    QList<QCameraInfo> cameras = QCameraInfo::availableCameras();
    QString info = QString("Available Cameras: \n");

    foreach (const QCameraInfo &cameraInfo, cameras) {
        info += "  - " + cameraInfo.deviceName() +  ": ";
        info += cameraInfo.description() + "\n";
    }
    QMessageBox::information(this, "Cameras", info);
}

#ifdef CAR_USE_QT_CAMERA
void MainWindow::openCamera()
{
    camera->setCaptureMode(QCamera::CaptureVideo);
    camera->start();
}
#else
void MainWindow::openCamera()
{
  /*  if(capturer != nullptr) {
            // if a thread is already running, stop it
            capturer->setRunning(false);
            disconnect(capturer,&camera::frameCaptured,this,&MainWindow::updateFrame);

//            connect(capturer, &camera::finished, capturer, &camera::deleteLater);
        }
    int camID=0;
    capturer=new camera(camID, data_lock);
    connect(capturer,&camera::frameCaptured,this,&MainWindow::updateFrame);
    capturer->start();
    mainStatusLabel->setText(QString("Capturing Camera %1").arg(camID));//更新主窗口的状态标签
    ui->checkBox->setCheckState(Qt::Unchecked);//把monitor这个复选框初始化为空
*/

qDebug()<<"WELL";
}
#endif

void MainWindow::calculateFPS()
{
    qDebug()<<"OK";
}

void MainWindow::updateFPS(float fps)
{
    mainStatusLabel->setText(QString("FPS of current camera is %1").arg(fps));
}

void MainWindow::updateFrame(cv::Mat *mat)
{
    data_lock->lock();
    currentFrame = *mat;
    data_lock->unlock();

    QImage frame(
        currentFrame.data,
        currentFrame.cols,
        currentFrame.rows,
        currentFrame.step,
        QImage::Format_RGB888);
    QPixmap image = QPixmap::fromImage(frame);

    imageScene->clear();
    ui->graphicsView->resetMatrix();//重置 QGraphicsView 中的变换矩阵，确保图像以原始尺寸显示
    imageScene->addPixmap(image);
    imageScene->update();
    ui->graphicsView->setSceneRect(image.rect());//设置 QGraphicsView 的场景矩形，以匹配图像的大小
}

MainWindow::~MainWindow()
{

    delete ui;
}


void MainWindow::on_checkBox_stateChanged(int arg1)
{
    this->calculateFPS();
//    c=new camera;
//    c->updateFrame();
}

void MainWindow::on_graphicsView_rubberBandChanged(const QRect &viewportRect, const QPointF &fromScenePoint, const QPointF &toScenePoint)
{

}
